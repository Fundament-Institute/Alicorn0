let registry-type = lambda_implicit (U : universe)
	lambda (T : U)
		let inner = intrinsic "return terms.strict_value.registry_type" :
			host-func-type ((T-wrap : wrapped(U))) -> ((registry-type-wrap : wrapped(type)))
		let (registry-type-wrap) = inner(wrap(T))
		unwrap(registry-type-wrap)

let registration-type = lambda_curry (U : universe, T : U)
	lambda (R : registry-type(T), val : T)
		let inner = intrinsic "return terms.strict_value.registration_type" :
			host-func-type (R-wrap : wrapped(registry-type(T)), val-wrap : wrapped(T)) -> ((registration-type-wrap : wrapped(type)))
		let (registration-type-wrap) = inner(wrap(R), wrap(val))
		unwrap(registration-type-wrap)

let mk-registry = lambda_implicit (U : universe)
	lambda-prog (T : U)
		let inner = intrinsic
			""""
				return "TODO"
			:
			host-prog-type ((T-wrap : wrapped(U))) -> ((R-wrap : wrapped(registry-type(T))))
		let (R-wrap) = inner(wrap(T))
		unwrap(R-wrap)

let register = lambda_curry (U : universe, T : U)
	lambda-prog (R : registry-type(T), val : T)
		let inner = intrinsic
			""""
				return "TODO"
			:
			host-prog-type (R-wrap : wrapped(registry-type(T)), val-wrap : wrapped(T)) -> ((rn-wrap : registration-type(R, val)))
		let (rn-wrap) = inner(wrap(R), wrap(val))
		unwrap(rn-wrap)
