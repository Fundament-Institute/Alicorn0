let host-arith-binop = (host-func-type (a : host-number, b : host-number) -> ((c : host-number)))
let host-sub = (intrinsic "return function(a, b) return a - b end" : host-arith-binop)

#let host-sub = (intrinsic "return function(a, b) return a - b end" : (host-func-type (a : host-number, b : host-number) -> ((c : host-number))))

#let foo = (record (bar = 5) (baz = 6))
#let subbed = host-sub foo.bar y

let host-mul = (intrinsic "return function(a, b) return a * b end" : host-arith-binop)
let mul = lambda (a : host-number, b : host-number)
	let (c) = host-mul(a, b)
	c
let _*_ = mul

let sqr = lambda (x)
	x * x
sqr 6
