-- THIS FILE AUTOGENERATED BY terms-gen-meta.lua
---@meta "types.flex_continuation"

---@class (exact) flex_continuation: EnumValue
flex_continuation = {}

---@return boolean
function flex_continuation:is_strict() end
---@return strict_continuation strict
function flex_continuation:unwrap_strict() end
---@return boolean
---@return strict_continuation strict
function flex_continuation:as_strict() end
---@return boolean
function flex_continuation:is_stuck() end
---@return stuck_continuation stuck
function flex_continuation:unwrap_stuck() end
---@return boolean
---@return stuck_continuation stuck
function flex_continuation:as_stuck() end
---@return boolean
function flex_continuation:is_empty() end
---@return nil
function flex_continuation:unwrap_empty() end
---@return boolean
function flex_continuation:as_empty() end
---@return boolean
function flex_continuation:is_frame() end
---@return FlexRuntimeContext context
---@return spanned_name debuginfo
---@return typed code
function flex_continuation:unwrap_frame() end
---@return boolean
---@return FlexRuntimeContext context
---@return spanned_name debuginfo
---@return typed code
function flex_continuation:as_frame() end
---@return boolean
function flex_continuation:is_sequence() end
---@return flex_continuation first
---@return flex_continuation second
function flex_continuation:unwrap_sequence() end
---@return boolean
---@return flex_continuation first
---@return flex_continuation second
function flex_continuation:as_sequence() end

---@class (exact) flex_continuationType: EnumType
---@field define_enum fun(self: flex_continuationType, name: string, variants: Variants): flex_continuationType
---@field strict fun(strict: strict_continuation): flex_continuation
---@field stuck fun(stuck: stuck_continuation): flex_continuation
---@field empty flex_continuation
---@field frame fun(context: FlexRuntimeContext, debuginfo: spanned_name, code: typed): flex_continuation
---@field sequence fun(first: flex_continuation, second: flex_continuation): flex_continuation
return {}
