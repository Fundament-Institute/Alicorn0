-- THIS FILE AUTOGENERATED BY terms-gen-meta.lua
---@meta "types.binding"

---@class (exact) binding: EnumValue
binding = {}

---@return boolean
function binding:is_let() end
---@return string, anchored_inferrable
function binding:unwrap_let() end
---@return boolean, string, anchored_inferrable
function binding:as_let() end
---@return boolean
function binding:is_tuple_elim() end
---@return ArrayValue, anchored_inferrable
function binding:unwrap_tuple_elim() end
---@return boolean, ArrayValue, anchored_inferrable
function binding:as_tuple_elim() end
---@return boolean
function binding:is_annotated_lambda() end
---@return string, anchored_inferrable, Anchor, visibility, checkable
function binding:unwrap_annotated_lambda() end
---@return boolean, string, anchored_inferrable, Anchor, visibility, checkable
function binding:as_annotated_lambda() end
---@return boolean
function binding:is_program_sequence() end
---@return anchored_inferrable, Anchor
function binding:unwrap_program_sequence() end
---@return boolean, anchored_inferrable, Anchor
function binding:as_program_sequence() end

---@class (exact) bindingType: EnumType
---@field define_enum fun(self: bindingType, name: string, variants: Variants): bindingType
---@field let fun(name: string, expr: anchored_inferrable): binding
---@field tuple_elim fun(names: ArrayValue, subject: anchored_inferrable): binding
---@field annotated_lambda fun(param_name: string, param_annotation: anchored_inferrable, anchor: Anchor, visible: visibility, pure: checkable): binding
---@field program_sequence fun(first: anchored_inferrable, anchor: Anchor): binding
return {}
