-- THIS FILE AUTOGENERATED BY terms-gen-meta.lua
---@meta "value.lua"
---@class (exact) value
---@field kind string
---@field pretty_print fun(...)
value = {}
---@return boolean
function value:is_visibility_type() end
---@return boolean
function value:is_visibility() end
---@return visibility
function value:unwrap_visibility() end
---@return boolean, visibility
function value:as_visibility() end
---@return boolean
function value:is_param_info_type() end
---@return boolean
function value:is_param_info() end
---@return value
function value:unwrap_param_info() end
---@return boolean, value
function value:as_param_info() end
---@return boolean
function value:is_result_info_type() end
---@return boolean
function value:is_result_info() end
---@return any
function value:unwrap_result_info() end
---@return boolean, any
function value:as_result_info() end
---@return boolean
function value:is_pi() end
---@return value, value, value, value
function value:unwrap_pi() end
---@return boolean, value, value, value, value
function value:as_pi() end
---@return boolean
function value:is_closure() end
---@return string, typed, any
function value:unwrap_closure() end
---@return boolean, string, typed, any
function value:as_closure() end
---@return boolean
function value:is_range() end
---@return any, any, any
function value:unwrap_range() end
---@return boolean, any, any, any
function value:as_range() end
---@return boolean
function value:is_name_type() end
---@return boolean
function value:is_name() end
---@return string
function value:unwrap_name() end
---@return boolean, string
function value:as_name() end
---@return boolean
function value:is_operative_value() end
---@return value
function value:unwrap_operative_value() end
---@return boolean, value
function value:as_operative_value() end
---@return boolean
function value:is_operative_type() end
---@return value, value
function value:unwrap_operative_type() end
---@return boolean, value, value
function value:as_operative_type() end
---@return boolean
function value:is_tuple_value() end
---@return any
function value:unwrap_tuple_value() end
---@return boolean, any
function value:as_tuple_value() end
---@return boolean
function value:is_tuple_type() end
---@return value
function value:unwrap_tuple_type() end
---@return boolean, value
function value:as_tuple_type() end
---@return boolean
function value:is_tuple_defn_type() end
---@return value
function value:unwrap_tuple_defn_type() end
---@return boolean, value
function value:as_tuple_defn_type() end
---@return boolean
function value:is_enum_value() end
---@return string, value
function value:unwrap_enum_value() end
---@return boolean, string, value
function value:as_enum_value() end
---@return boolean
function value:is_enum_type() end
---@return value
function value:unwrap_enum_type() end
---@return boolean, value
function value:as_enum_type() end
---@return boolean
function value:is_enum_defn_type() end
---@return value
function value:unwrap_enum_defn_type() end
---@return boolean, value
function value:as_enum_defn_type() end
---@return boolean
function value:is_record_value() end
---@return any
function value:unwrap_record_value() end
---@return boolean, any
function value:as_record_value() end
---@return boolean
function value:is_record_type() end
---@return value
function value:unwrap_record_type() end
---@return boolean, value
function value:as_record_type() end
---@return boolean
function value:is_record_defn_type() end
---@return value
function value:unwrap_record_defn_type() end
---@return boolean, value
function value:as_record_defn_type() end
---@return boolean
function value:is_record_extend_stuck() end
---@return neutral_value, any
function value:unwrap_record_extend_stuck() end
---@return boolean, neutral_value, any
function value:as_record_extend_stuck() end
---@return boolean
function value:is_object_value() end
---@return any, any
function value:unwrap_object_value() end
---@return boolean, any, any
function value:as_object_value() end
---@return boolean
function value:is_object_type() end
---@return value
function value:unwrap_object_type() end
---@return boolean, value
function value:as_object_type() end
---@return boolean
function value:is_level_type() end
---@return boolean
function value:is_number_type() end
---@return boolean
function value:is_number() end
---@return number
function value:unwrap_number() end
---@return boolean, number
function value:as_number() end
---@return boolean
function value:is_level() end
---@return number
function value:unwrap_level() end
---@return boolean, number
function value:as_level() end
---@return boolean
function value:is_star() end
---@return number
function value:unwrap_star() end
---@return boolean, number
function value:as_star() end
---@return boolean
function value:is_prop() end
---@return number
function value:unwrap_prop() end
---@return boolean, number
function value:as_prop() end
---@return boolean
function value:is_neutral() end
---@return neutral_value
function value:unwrap_neutral() end
---@return boolean, neutral_value
function value:as_neutral() end
---@return boolean
function value:is_prim() end
---@return any
function value:unwrap_prim() end
---@return boolean, any
function value:as_prim() end
---@return boolean
function value:is_prim_type_type() end
---@return boolean
function value:is_prim_number_type() end
---@return boolean
function value:is_prim_bool_type() end
---@return boolean
function value:is_prim_string_type() end
---@return boolean
function value:is_prim_function_type() end
---@return value, value
function value:unwrap_prim_function_type() end
---@return boolean, value, value
function value:as_prim_function_type() end
---@return boolean
function value:is_prim_wrapped_type() end
---@return value
function value:unwrap_prim_wrapped_type() end
---@return boolean, value
function value:as_prim_wrapped_type() end
---@return boolean
function value:is_prim_unstrict_wrapped_type() end
---@return value
function value:unwrap_prim_unstrict_wrapped_type() end
---@return boolean, value
function value:as_prim_unstrict_wrapped_type() end
---@return boolean
function value:is_prim_user_defined_type() end
---@return any, any
function value:unwrap_prim_user_defined_type() end
---@return boolean, any, any
function value:as_prim_user_defined_type() end
---@return boolean
function value:is_prim_nil_type() end
---@return boolean
function value:is_prim_tuple_value() end
---@return any
function value:unwrap_prim_tuple_value() end
---@return boolean, any
function value:as_prim_tuple_value() end
---@return boolean
function value:is_prim_tuple_type() end
---@return value
function value:unwrap_prim_tuple_type() end
---@return boolean, value
function value:as_prim_tuple_type() end
---@return boolean
function value:is_singleton() end
---@return value, value
function value:unwrap_singleton() end
---@return boolean, value, value
function value:as_singleton() end
---@class (exact) valueType:Type
---@field visibility_type value
---@field visibility fun(visibility:visibility): value
---@field param_info_type value
---@field param_info fun(visibility:value): value
---@field result_info_type value
---@field result_info fun(result_info:any): value
---@field pi fun(param_type:value, param_info:value, result_type:value, result_info:value): value
---@field closure fun(param_name:string, code:typed, capture:any): value
---@field range fun(lower_bounds:any, upper_bounds:any, relation:any): value
---@field name_type value
---@field name fun(name:string): value
---@field operative_value fun(userdata:value): value
---@field operative_type fun(handler:value, userdata_type:value): value
---@field tuple_value fun(elements:any): value
---@field tuple_type fun(decls:value): value
---@field tuple_defn_type fun(universe:value): value
---@field enum_value fun(constructor:string, arg:value): value
---@field enum_type fun(decls:value): value
---@field enum_defn_type fun(universe:value): value
---@field record_value fun(fields:any): value
---@field record_type fun(decls:value): value
---@field record_defn_type fun(universe:value): value
---@field record_extend_stuck fun(base:neutral_value, extension:any): value
---@field object_value fun(methods:any, capture:any): value
---@field object_type fun(decls:value): value
---@field level_type value
---@field number_type value
---@field number fun(number:number): value
---@field level fun(level:number): value
---@field star fun(level:number): value
---@field prop fun(level:number): value
---@field neutral fun(neutral:neutral_value): value
---@field prim fun(primitive_value:any): value
---@field prim_type_type value
---@field prim_number_type value
---@field prim_bool_type value
---@field prim_string_type value
---@field prim_function_type fun(param_type:value, result_type:value): value
---@field prim_wrapped_type fun(type:value): value
---@field prim_unstrict_wrapped_type fun(type:value): value
---@field prim_user_defined_type fun(id:any, family_args:any): value
---@field prim_nil_type value
---@field prim_tuple_value fun(elements:any): value
---@field prim_tuple_type fun(decls:value): value
---@field singleton fun(supertype:value, value:value): value
return {}
