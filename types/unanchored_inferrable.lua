-- THIS FILE AUTOGENERATED BY terms-gen-meta.lua
---@meta "types.unanchored_inferrable"

---@class (exact) unanchored_inferrable: EnumValue
unanchored_inferrable = {}

---@return boolean
function unanchored_inferrable:is_bound_variable() end
---@return number
function unanchored_inferrable:unwrap_bound_variable() end
---@return boolean, number
function unanchored_inferrable:as_bound_variable() end
---@return boolean
function unanchored_inferrable:is_typed() end
---@return value, ArrayValue, typed
function unanchored_inferrable:unwrap_typed() end
---@return boolean, value, ArrayValue, typed
function unanchored_inferrable:as_typed() end
---@return boolean
function unanchored_inferrable:is_annotated_lambda() end
---@return string, anchored_inferrable, anchored_inferrable, Anchor, visibility, checkable
function unanchored_inferrable:unwrap_annotated_lambda() end
---@return boolean, string, anchored_inferrable, anchored_inferrable, Anchor, visibility, checkable
function unanchored_inferrable:as_annotated_lambda() end
---@return boolean
function unanchored_inferrable:is_pi() end
---@return anchored_inferrable, checkable, anchored_inferrable, checkable
function unanchored_inferrable:unwrap_pi() end
---@return boolean, anchored_inferrable, checkable, anchored_inferrable, checkable
function unanchored_inferrable:as_pi() end
---@return boolean
function unanchored_inferrable:is_application() end
---@return anchored_inferrable, checkable
function unanchored_inferrable:unwrap_application() end
---@return boolean, anchored_inferrable, checkable
function unanchored_inferrable:as_application() end
---@return boolean
function unanchored_inferrable:is_tuple_cons() end
---@return ArrayValue
function unanchored_inferrable:unwrap_tuple_cons() end
---@return boolean, ArrayValue
function unanchored_inferrable:as_tuple_cons() end
---@return boolean
function unanchored_inferrable:is_tuple_elim() end
---@return ArrayValue, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_tuple_elim() end
---@return boolean, ArrayValue, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_tuple_elim() end
---@return boolean
function unanchored_inferrable:is_tuple_type() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_tuple_type() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_tuple_type() end
---@return boolean
function unanchored_inferrable:is_record_cons() end
---@return MapValue
function unanchored_inferrable:unwrap_record_cons() end
---@return boolean, MapValue
function unanchored_inferrable:as_record_cons() end
---@return boolean
function unanchored_inferrable:is_record_elim() end
---@return anchored_inferrable, ArrayValue, anchored_inferrable
function unanchored_inferrable:unwrap_record_elim() end
---@return boolean, anchored_inferrable, ArrayValue, anchored_inferrable
function unanchored_inferrable:as_record_elim() end
---@return boolean
function unanchored_inferrable:is_enum_cons() end
---@return value, string, anchored_inferrable
function unanchored_inferrable:unwrap_enum_cons() end
---@return boolean, value, string, anchored_inferrable
function unanchored_inferrable:as_enum_cons() end
---@return boolean
function unanchored_inferrable:is_enum_elim() end
---@return anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_enum_elim() end
---@return boolean, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_enum_elim() end
---@return boolean
function unanchored_inferrable:is_enum_type() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_enum_type() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_enum_type() end
---@return boolean
function unanchored_inferrable:is_object_cons() end
---@return MapValue
function unanchored_inferrable:unwrap_object_cons() end
---@return boolean, MapValue
function unanchored_inferrable:as_object_cons() end
---@return boolean
function unanchored_inferrable:is_object_elim() end
---@return anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_object_elim() end
---@return boolean, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_object_elim() end
---@return boolean
function unanchored_inferrable:is_let() end
---@return string, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_let() end
---@return boolean, string, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_let() end
---@return boolean
function unanchored_inferrable:is_operative_cons() end
---@return anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_operative_cons() end
---@return boolean, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_operative_cons() end
---@return boolean
function unanchored_inferrable:is_operative_type_cons() end
---@return checkable, anchored_inferrable
function unanchored_inferrable:unwrap_operative_type_cons() end
---@return boolean, checkable, anchored_inferrable
function unanchored_inferrable:as_operative_type_cons() end
---@return boolean
function unanchored_inferrable:is_level_type() end
---@return nil
function unanchored_inferrable:unwrap_level_type() end
---@return boolean
function unanchored_inferrable:as_level_type() end
---@return boolean
function unanchored_inferrable:is_level0() end
---@return nil
function unanchored_inferrable:unwrap_level0() end
---@return boolean
function unanchored_inferrable:as_level0() end
---@return boolean
function unanchored_inferrable:is_level_suc() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_level_suc() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_level_suc() end
---@return boolean
function unanchored_inferrable:is_level_max() end
---@return anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_level_max() end
---@return boolean, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_level_max() end
---@return boolean
function unanchored_inferrable:is_annotated() end
---@return checkable, anchored_inferrable
function unanchored_inferrable:unwrap_annotated() end
---@return boolean, checkable, anchored_inferrable
function unanchored_inferrable:as_annotated() end
---@return boolean
function unanchored_inferrable:is_host_tuple_cons() end
---@return ArrayValue
function unanchored_inferrable:unwrap_host_tuple_cons() end
---@return boolean, ArrayValue
function unanchored_inferrable:as_host_tuple_cons() end
---@return boolean
function unanchored_inferrable:is_host_user_defined_type_cons() end
---@return { name: string }, ArrayValue
function unanchored_inferrable:unwrap_host_user_defined_type_cons() end
---@return boolean, { name: string }, ArrayValue
function unanchored_inferrable:as_host_user_defined_type_cons() end
---@return boolean
function unanchored_inferrable:is_host_tuple_type() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_tuple_type() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_tuple_type() end
---@return boolean
function unanchored_inferrable:is_host_function_type() end
---@return anchored_inferrable, anchored_inferrable, checkable
function unanchored_inferrable:unwrap_host_function_type() end
---@return boolean, anchored_inferrable, anchored_inferrable, checkable
function unanchored_inferrable:as_host_function_type() end
---@return boolean
function unanchored_inferrable:is_host_wrapped_type() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_wrapped_type() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_wrapped_type() end
---@return boolean
function unanchored_inferrable:is_host_unstrict_wrapped_type() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_unstrict_wrapped_type() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_unstrict_wrapped_type() end
---@return boolean
function unanchored_inferrable:is_host_wrap() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_wrap() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_wrap() end
---@return boolean
function unanchored_inferrable:is_host_unstrict_wrap() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_unstrict_wrap() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_unstrict_wrap() end
---@return boolean
function unanchored_inferrable:is_host_unwrap() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_unwrap() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_unwrap() end
---@return boolean
function unanchored_inferrable:is_host_unstrict_unwrap() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_host_unstrict_unwrap() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_host_unstrict_unwrap() end
---@return boolean
function unanchored_inferrable:is_host_if() end
---@return checkable, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_host_if() end
---@return boolean, checkable, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_host_if() end
---@return boolean
function unanchored_inferrable:is_host_intrinsic() end
---@return checkable, anchored_inferrable, Anchor
function unanchored_inferrable:unwrap_host_intrinsic() end
---@return boolean, checkable, anchored_inferrable, Anchor
function unanchored_inferrable:as_host_intrinsic() end
---@return boolean
function unanchored_inferrable:is_program_sequence() end
---@return anchored_inferrable, Anchor, anchored_inferrable
function unanchored_inferrable:unwrap_program_sequence() end
---@return boolean, anchored_inferrable, Anchor, anchored_inferrable
function unanchored_inferrable:as_program_sequence() end
---@return boolean
function unanchored_inferrable:is_program_end() end
---@return anchored_inferrable
function unanchored_inferrable:unwrap_program_end() end
---@return boolean, anchored_inferrable
function unanchored_inferrable:as_program_end() end
---@return boolean
function unanchored_inferrable:is_program_type() end
---@return anchored_inferrable, anchored_inferrable
function unanchored_inferrable:unwrap_program_type() end
---@return boolean, anchored_inferrable, anchored_inferrable
function unanchored_inferrable:as_program_type() end

---@class (exact) unanchored_inferrableType: EnumType
---@field define_enum fun(self: unanchored_inferrableType, name: string, variants: Variants): unanchored_inferrableType
---@field bound_variable fun(index: number): unanchored_inferrable
---@field typed fun(type: value, usage_counts: ArrayValue, typed_term: typed): unanchored_inferrable
---@field annotated_lambda fun(param_name: string, param_annotation: anchored_inferrable, body: anchored_inferrable, anchor: Anchor, visible: visibility, pure: checkable): unanchored_inferrable
---@field pi fun(param_type: anchored_inferrable, param_info: checkable, result_type: anchored_inferrable, result_info: checkable): unanchored_inferrable
---@field application fun(f: anchored_inferrable, arg: checkable): unanchored_inferrable
---@field tuple_cons fun(elements: ArrayValue): unanchored_inferrable
---@field tuple_elim fun(names: ArrayValue, subject: anchored_inferrable, body: anchored_inferrable): unanchored_inferrable
---@field tuple_type fun(desc: anchored_inferrable): unanchored_inferrable
---@field record_cons fun(fields: MapValue): unanchored_inferrable
---@field record_elim fun(subject: anchored_inferrable, field_names: ArrayValue, body: anchored_inferrable): unanchored_inferrable
---@field enum_cons fun(enum_type: value, constructor: string, arg: anchored_inferrable): unanchored_inferrable
---@field enum_elim fun(subject: anchored_inferrable, mechanism: anchored_inferrable): unanchored_inferrable
---@field enum_type fun(desc: anchored_inferrable): unanchored_inferrable
---@field object_cons fun(methods: MapValue): unanchored_inferrable
---@field object_elim fun(subject: anchored_inferrable, mechanism: anchored_inferrable): unanchored_inferrable
---@field let fun(name: string, expr: anchored_inferrable, body: anchored_inferrable): unanchored_inferrable
---@field operative_cons fun(operative_type: anchored_inferrable, userdata: anchored_inferrable): unanchored_inferrable
---@field operative_type_cons fun(handler: checkable, userdata_type: anchored_inferrable): unanchored_inferrable
---@field level_type unanchored_inferrable
---@field level0 unanchored_inferrable
---@field level_suc fun(previous_level: anchored_inferrable): unanchored_inferrable
---@field level_max fun(level_a: anchored_inferrable, level_b: anchored_inferrable): unanchored_inferrable
---@field annotated fun(annotated_term: checkable, annotated_type: anchored_inferrable): unanchored_inferrable
---@field host_tuple_cons fun(elements: ArrayValue): unanchored_inferrable
---@field host_user_defined_type_cons fun(id: { name: string }, family_args: ArrayValue): unanchored_inferrable
---@field host_tuple_type fun(desc: anchored_inferrable): unanchored_inferrable
---@field host_function_type fun(param_type: anchored_inferrable, result_type: anchored_inferrable, result_info: checkable): unanchored_inferrable
---@field host_wrapped_type fun(type: anchored_inferrable): unanchored_inferrable
---@field host_unstrict_wrapped_type fun(type: anchored_inferrable): unanchored_inferrable
---@field host_wrap fun(content: anchored_inferrable): unanchored_inferrable
---@field host_unstrict_wrap fun(content: anchored_inferrable): unanchored_inferrable
---@field host_unwrap fun(container: anchored_inferrable): unanchored_inferrable
---@field host_unstrict_unwrap fun(container: anchored_inferrable): unanchored_inferrable
---@field host_if fun(subject: checkable, consequent: anchored_inferrable, alternate: anchored_inferrable): unanchored_inferrable
---@field host_intrinsic fun(source: checkable, type: anchored_inferrable, anchor: Anchor): unanchored_inferrable
---@field program_sequence fun(first: anchored_inferrable, anchor: Anchor, continue: anchored_inferrable): unanchored_inferrable
---@field program_end fun(result: anchored_inferrable): unanchored_inferrable
---@field program_type fun(effect_type: anchored_inferrable, result_type: anchored_inferrable): unanchored_inferrable
return {}
